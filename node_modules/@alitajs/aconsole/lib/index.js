"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@umijs/utils");

  _utils = function _utils() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = api => {
  var _aconsole$inspx;

  const userConfig = api.userConfig;
  const _userConfig$aconsole = userConfig.aconsole,
        aconsole = _userConfig$aconsole === void 0 ? {} : _userConfig$aconsole; // 配置

  api.describe({
    key: 'aconsole',
    config: {
      schema(joi) {
        return joi.object({
          inspx: joi.object({
            disabled: joi.boolean(),
            production: joi.boolean(),
            margin: joi.boolean(),
            size: joi.boolean(),
            padding: joi.boolean(),
            bottom: joi.string(),
            right: joi.string()
          }),
          console: joi.object({
            defaultPlugins: joi.array(),
            onReady: joi.function(),
            onClearLog: joi.function(),
            maxLogNumber: joi.number(),
            disableLogScrolling: joi.boolean(),
            theme: joi.string()
          })
        });
      }

    }
  });

  if (aconsole === null || aconsole === void 0 ? void 0 : aconsole.console) {
    api.addHTMLStyles(() => {
      return [{
        content: `.vc-switch { right: 0px; bottom: calc(env(safe-area-inset-bottom) + 1.2rem) !important; font-size: 0.3rem !important; }`
      }];
    });
    api.addEntryImports(() => {
      return [{
        source: 'vconsole',
        specifier: 'VConsole'
      }];
    });
    api.addEntryCode(() => {
      return `const c = new VConsole(${JSON.stringify(aconsole.console)});`;
    });
  } // 开发环境或者强制指定 production 添加，才使用 inspx 功能


  if (process.env.NODE_ENV === 'development' && (aconsole === null || aconsole === void 0 ? void 0 : aconsole.inspx) || (aconsole === null || aconsole === void 0 ? void 0 : aconsole.inspx) && (aconsole === null || aconsole === void 0 ? void 0 : (_aconsole$inspx = aconsole.inspx) === null || _aconsole$inspx === void 0 ? void 0 : _aconsole$inspx.production)) {
    // 生成临时文件
    api.onGenerateFiles({
      fn() {
        // inspx.ts
        const inspxTpl = (0, _fs().readFileSync)((0, _path().join)(__dirname, 'inspx.tpl'), 'utf-8');
        api.writeTmpFile({
          path: 'plugin-inspx/inspx.tsx',
          content: _utils().Mustache.render(inspxTpl, {
            inspxpath: (0, _utils().winPath)((0, _path().dirname)(require.resolve('@alita/inspx/package'))),
            inspx: _objectSpread(_objectSpread({}, {
              disabled: false,
              margin: true,
              size: true,
              padding: true,
              bottom: '2.1rem',
              right: '0'
            }), api.userConfig.inspx || {})
          })
        }); // runtime.tsx

        const runtimeTpl = (0, _fs().readFileSync)((0, _path().join)(__dirname, 'runtime.tpl'), 'utf-8');
        api.writeTmpFile({
          path: 'plugin-inspx/runtime.tsx',
          content: runtimeTpl
        });
      }

    });
    api.addRuntimePlugin(() => [(0, _path().join)(api.paths.absTmpPath, 'plugin-inspx/runtime.tsx')]);
  }
};

exports.default = _default;