import 'antd-mobile/es/tab-bar/style';
import _TabBar from 'antd-mobile/es/tab-bar';
import 'antd-mobile/es/nav-bar/style';
import _NavBar from 'antd-mobile/es/nav-bar';
import 'antd-mobile/es/icon/style';
import _Icon from 'antd-mobile/es/icon';
import React, { useEffect } from 'react';
import { withRouter } from 'react-router-dom';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function useDocumentTitle(title) {
  useEffect(function () {
    var originalTitle = document.title;
    document.title = title;
    return function () {
      document.title = originalTitle;
    };
  }, [title]);
}

var checkNavBarList = function checkNavBarList(pagePath, lists) {
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath && !!item.navBar;
  });

  if (page && page.length > 0) {
    return page[0].navBar;
  }

  return null;
};

var checkTabsList = function checkTabsList(pagePath, lists, tabsGrouping) {
  var realList = lists;
  var realGroup;
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath;
  });

  if (tabsGrouping && tabsGrouping.length > 0) {
    tabsGrouping.forEach(function (tabsGroup) {
      if (page[0] && tabsGroup.includes(page[0].pagePath)) {
        realGroup = tabsGroup;
      }
    });
  }

  if (realGroup) {
    realList = lists.filter(function (item) {
      return realGroup.includes(item.pagePath);
    });
  }

  return {
    hasTabsBar: page && page.length > 0,
    pageTitle: page[0] ? page[0].title || page[0].text : '',
    realList: realList
  };
};

var checkTitleList = function checkTitleList(pagePath, lists) {
  var page = lists.filter(function (item) {
    return item.pagePath === pagePath;
  });
  return page[0] ? page[0].title : '';
};

var headerRender = function headerRender(_ref) {
  var realNavBar = _ref.realNavBar,
      hasTabsBar = _ref.hasTabsBar,
      realTitle = _ref.realTitle,
      history = _ref.history;
  var defaultIcon = hasTabsBar ? null : /*#__PURE__*/React.createElement(_Icon, {
    type: "left"
  });
  var mode = realNavBar.mode,
      icon = realNavBar.icon,
      onLeftClick = realNavBar.onLeftClick,
      rightContent = realNavBar.rightContent,
      leftContent = realNavBar.leftContent,
      hideNavBar = realNavBar.hideNavBar,
      className = realNavBar.className,
      pageTitle = realNavBar.pageTitle;
  var defaultEvent = onLeftClick || (!hasTabsBar ? history.goBack : function () {});

  if (hideNavBar === true) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "alita-layout-head am-navbar am-navbar-dark",
    style: {
      height: 'auto',
      flexShrink: 0,
      paddingTop: 'var(--alita-safe-area-top)'
    }
  }, /*#__PURE__*/React.createElement(_NavBar, {
    mode: mode,
    style: {
      width: '100%'
    },
    icon: icon || defaultIcon,
    onLeftClick: function onLeftClick() {
      return defaultEvent(history);
    },
    rightContent: rightContent,
    leftContent: leftContent,
    className: className
  }, pageTitle || realTitle)));
};

var styleInject = function styleInject() {
  var css = '.am-tab-bar {\n  padding-bottom:var(--alita-safe-area-bottom);\n} html{--alita-safe-area-top: env(safe-area-inset-top);--alita-safe-area-bottom: env(safe-area-inset-bottom);--alita-safe-area-left: env(safe-area-inset-left);--alita-safe-area-right: env(safe-area-inset-right);}';

  if (typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
};

styleInject();

var AlitaLayout = function AlitaLayout(_ref2) {
  var children = _ref2.children,
      pathname = _ref2.location.pathname,
      _ref2$tabBar = _ref2.tabBar,
      tabBar = _ref2$tabBar === void 0 ? {} : _ref2$tabBar,
      documentTitle = _ref2.documentTitle,
      _ref2$titleList = _ref2.titleList,
      titleList = _ref2$titleList === void 0 ? [] : _ref2$titleList,
      history = _ref2.history,
      _ref2$navBar = _ref2.navBar,
      navBar = _ref2$navBar === void 0 ? {} : _ref2$navBar,
      _ref2$hideNavBar = _ref2.hideNavBar,
      hideNavBar = _ref2$hideNavBar === void 0 ? false : _ref2$hideNavBar;
  var _tabBar$list = tabBar.list,
      list = _tabBar$list === void 0 ? [] : _tabBar$list,
      color = tabBar.color,
      selectedColor = tabBar.selectedColor,
      _tabBar$backgroungCol = tabBar.backgroungColor,
      backgroungColor = _tabBar$backgroungCol === void 0 ? '#FFF' : _tabBar$backgroungCol,
      position = tabBar.position,
      _tabBar$tabsGroup = tabBar.tabsGroup,
      tabsGroup = _tabBar$tabsGroup === void 0 ? [] : _tabBar$tabsGroup;
  var navList = navBar.navList;
  var pageNavBar = null;

  if (navList) {
    pageNavBar = checkNavBarList(pathname, navList);
  }

  var realNavBar = _objectSpread2(_objectSpread2({}, navBar), pageNavBar);

  var pageBackground = realNavBar.pageBackground;

  var _checkTabsList = checkTabsList(pathname, list, tabsGroup),
      hasTabsBar = _checkTabsList.hasTabsBar,
      pageTitle = _checkTabsList.pageTitle,
      realList = _checkTabsList.realList;

  var isTabsApp = list.length > 0;
  var titleListItem = checkTitleList(pathname, titleList);
  var realTitle = titleListItem || pageTitle || documentTitle || ''; // 头部永久固定，部分页面需要跟随页面流滚动，可以选择隐藏 NavBar，在页面中手动添加

  var headFixed = realNavBar.fixed;

  if (headFixed) {
    console.warn('navbar fixed 设置已被移除，请通过在页面中手动添加的方式实现。有疑问请联系微信yu_xiaohu');
  }

  useDocumentTitle(realTitle); //

  return (
    /*#__PURE__*/
    // <DocumentTitle title={realTitle}>
    React.createElement("div", {
      className: "alita-page",
      style: {
        background: pageBackground || '#FFF'
      }
    }, !hideNavBar && headerRender({
      hasTabsBar: hasTabsBar,
      realNavBar: realNavBar,
      realTitle: realTitle,
      history: history
    }), /*#__PURE__*/React.createElement("div", {
      className: "alita-layout-content",
      style: {
        flex: '1 1 0%',
        overflowX: 'hidden',
        overflowY: 'auto',
        position: 'relative'
      }
    }, children), isTabsApp && hasTabsBar && /*#__PURE__*/React.createElement("div", {
      className: "alita-layout-footer",
      style: {
        flexShrink: 0
      }
    }, /*#__PURE__*/React.createElement(_TabBar, {
      tabBarPosition: position,
      unselectedTintColor: color,
      tintColor: selectedColor,
      barTintColor: backgroungColor,
      noRenderContent: true
    }, realList.map(function (item) {
      return /*#__PURE__*/React.createElement(_TabBar.Item, {
        title: item.text,
        icon: (item === null || item === void 0 ? void 0 : item.icon) || /*#__PURE__*/React.createElement("div", {
          style: {
            display: (item === null || item === void 0 ? void 0 : item.iconPath) ? 'block' : 'none',
            width: "".concat(item.iconSize || '0.38rem'),
            height: "".concat(item.iconSize || '0.38rem'),
            background: "url(".concat(item.iconPath, ") center center /  ").concat(item.iconSize || '0.38rem', " ").concat(item.iconSize || '0.38rem', " no-repeat")
          }
        }),
        selectedIcon: (item === null || item === void 0 ? void 0 : item.selectedIcon) || /*#__PURE__*/React.createElement("div", {
          style: {
            display: (item === null || item === void 0 ? void 0 : item.selectedIconPath) ? 'block' : 'none',
            width: "".concat(item.iconSize || '0.38rem'),
            height: "".concat(item.iconSize || '0.38rem'),
            background: "url(".concat(item.selectedIconPath, ") center center /  ").concat(item.iconSize || '0.38rem', " ").concat(item.iconSize || '0.38rem', " no-repeat")
          }
        }),
        selected: pathname === item.pagePath,
        badge: item.badge,
        onPress: function onPress() {
          if (pathname === item.pagePath) return;

          if (item.onPress) {
            item.onPress();
          } else {
            history.push(item.pagePath);
          }
        },
        key: item.pagePath
      });
    })))) // </DocumentTitle>

  );
};

var index = withRouter(AlitaLayout);

export default index;
